/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/ban-ts-comment, react-hooks/exhaustive-deps, @typescript-eslint/no-unused-vars */
'use client';

import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fr } from 'date-fns/locale';
import { BreadCrumb } from 'primereact/breadcrumb';
import { Button } from 'primereact/button';
import { Dialog } from 'primereact/dialog';
import { Checkbox } from 'primereact/checkbox';
import { Toast } from 'primereact/toast';
import type { Toast as ToastRef } from 'primereact/toast';
import { Menu } from 'primereact/menu';
import type { Menu as MenuRef } from 'primereact/menu';

import { AppDispatch, RootState } from '@/stores/store';
import { useUserRole } from '@/hooks/useUserRole';

import {
  fetchCommandes,
  fetchCommandesByPointVente,
  fetchCommandesByRegion,
  fetchCommandesByUser,
  selectAllCommandes,
  selectCommandeStatus,
  updateCommande,
} from '@/stores/slices/commandes/commandeSlice';

import type { Commande } from '@/Models/commandeType';
import type { CommandeProduit } from '@/Models/CommandeProduitType';
import { format } from 'date-fns';

/* ----------------------------- Helpers ----------------------------- */
const asArray = <T,>(v: unknown): T[] => (Array.isArray(v) ? (v as T[]) : []);
const isNonEmptyString = (v: unknown): v is string => typeof v === 'string' && v.trim().length > 0;
const safeNumber = (v: unknown, fallback = 0) => {
  const n = typeof v === 'string' ? Number(v) : typeof v === 'number' ? v : NaN;
  return Number.isFinite(n) ? n : fallback;
};
const formatCDF = (n: unknown) =>
  new Intl.NumberFormat('fr-CD', { style: 'currency', currency: 'CDF' }).format(safeNumber(n, 0));

type CommandeProduitWithTempChecked = CommandeProduit & { _tempChecked?: boolean };
type MenuMap = Record<string, MenuRef | null>;

const SortIcon: React.FC<{ order: 'asc' | 'desc' | null }> = ({ order }) => (
  <span className="inline-block align-middle ml-1">
    {order === 'asc' ? '▲' : order === 'desc' ? '▼' : '↕'}
  </span>
);

/* -------------------------------- Page -------------------------------- */
const Page: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const toast = useRef<ToastRef>(null);

  const { user, isSuperAdmin, isAdminPointVente, isAdminRegion } = useUserRole();

  const commandes = useSelector((s: RootState) => asArray<Commande>(selectAllCommandes(s)));
  const loading = useSelector((s: RootState) => selectCommandeStatus(s)) === 'loading';

  // UI state (pagination + tri)
  const [rows, setRows] = useState(10); // lignes par page
  const [page, setPage] = useState(1); // 1-based
  const [sortBy, setSortBy] = useState<
    'numero' | 'region' | 'pointVente' | 'nb' | 'statut' | 'montant' | 'createdAt'
  >('createdAt');
  const [order, setOrder] = useState<'asc' | 'desc'>('desc');

  // détails commande
  const [selectedCommande, setSelectedCommande] = useState<Commande | null>(null);
  const [visible, setVisible] = useState(false);
  const [produitsLivrables, setProduitsLivrables] = useState<CommandeProduitWithTempChecked[]>([]);
  const [saving, setSaving] = useState(false);

  // menus (références)
  const menuRefs = useRef<MenuMap>({});

  /* ------------------------- Data load (rôle) ------------------------- */
  useEffect(() => {
    let active = true;
    (async () => {
      try {
        if (!user?.role) return;

        if (isSuperAdmin) {
          //@ts-ignore
          await dispatch(fetchCommandes());
        } else if (isAdminPointVente && isNonEmptyString((user as any)?.pointVente?._id)) {
          await dispatch(fetchCommandesByPointVente((user as any).pointVente._id));
        } else if (isAdminRegion && isNonEmptyString((user as any)?.region?._id)) {
          await dispatch(fetchCommandesByRegion((user as any).region._id));
        } else if (user?.role === 'Logisticien' && isNonEmptyString(user?._id)) {
          await dispatch(fetchCommandesByUser(user._id));
        } else {
          //@ts-ignore
          await dispatch(fetchCommandes());
        }
      } catch {
        if (!active) return;
        toast.current?.show({
          severity: 'error',
          summary: 'Erreur',
          detail: 'Impossible de charger les commandes.',
          life: 3000,
        });
      }
    })();
    return () => {
      active = false;
    };
  }, [
    dispatch,
    user?.role,
    (user as any)?.pointVente?._id,
    (user as any)?.region?._id,
    user?._id,
    isSuperAdmin,
    isAdminPointVente,
    isAdminRegion,
  ]);

  /* ------------------------------ Menu actions ------------------------------ */
  const setMenuRef = useCallback((id: string, el: MenuRef | null) => {
    if (!id) return;
    menuRefs.current[id] = el;
  }, []);

  const showMenu = useCallback((event: React.MouseEvent, id: string) => {
    menuRefs.current[id]?.toggle(event);
  }, []);

  /* -------------------------- Modal / Produits livrés ----------------------- */
  const handleOpenModal = useCallback((commande: Commande) => {
    setSelectedCommande(commande);
    const produits = asArray<CommandeProduit>(commande?.produits);
    setProduitsLivrables(produits.map((p) => ({ ...p, _tempChecked: p?.statut === 'livré' })));
    setVisible(true);
  }, []);

  const handleCheck = useCallback((checked: boolean, index: number) => {
    setProduitsLivrables((prev) =>
      prev.map((p, i) => (i === index ? { ...p, _tempChecked: !!checked } : p))
    );
  }, []);

  const effectuerLivraison = useCallback(async () => {
    if (!selectedCommande) return;
    setSaving(true);
    try {
      const updatedProduits = asArray<CommandeProduit>(produitsLivrables).map((p) => ({
        ...p,
        // @ts-ignore champ temporaire
        statut: p._tempChecked ? 'livré' : p.statut,
      }));

      const payload: Commande = {
        ...selectedCommande,
        produits: updatedProduits,
      };

      await dispatch(updateCommande(payload)).unwrap();

      toast.current?.show({
        severity: 'success',
        summary: 'Livraison effectuée',
        detail: 'Les produits sélectionnés ont été livrés.',
        life: 2500,
      });
      setVisible(false);
    } catch {
      toast.current?.show({
        severity: 'error',
        summary: 'Erreur',
        detail: "Échec de l'enregistrement",
        life: 3000,
      });
    } finally {
      setSaving(false);
    }
  }, [dispatch, selectedCommande, produitsLivrables]);

  /* ----------------------------- Tri + pagination (client) ----------------------------- */
  const toggleSort = (field: typeof sortBy) => {
    if (sortBy !== field) {
      setSortBy(field);
      setOrder('asc');
      setPage(1);
    } else {
      setOrder(order === 'asc' ? 'desc' : 'asc');
      setPage(1);
    }
  };

  const sorted = useMemo(() => {
    const arr = [...commandes];
    const cmp = (a: Commande, b: Commande): number => {
      const dir = order === 'asc' ? 1 : -1;
      if (sortBy === 'numero') return (a.numero ?? '').localeCompare(b.numero ?? '') * dir;
      if (sortBy === 'region')
        return ((a.region as any)?.nom ?? '').localeCompare((b.region as any)?.nom ?? '') * dir;
      if (sortBy === 'pointVente')
        return (
          ((a.pointVente as any)?.nom ?? '').localeCompare((b.pointVente as any)?.nom ?? '') * dir
        );
      if (sortBy === 'nb') return (asArray(a.produits).length - asArray(b.produits).length) * dir;
      if (sortBy === 'statut') return (a.statut ?? '').localeCompare(b.statut ?? '') * dir;
      if (sortBy === 'montant')
        return (safeNumber((a as any).montant) - safeNumber((b as any).montant)) * dir;
      // createdAt
      const da = a?.createdAt ? new Date(a.createdAt).getTime() : 0;
      const db = b?.createdAt ? new Date(b.createdAt).getTime() : 0;
      return (da - db) * dir;
    };
    arr.sort(cmp);
    return arr;
  }, [commandes, sortBy, order]);

  const total = sorted.length;
  const totalPages = Math.max(1, Math.ceil(total / rows));
  const firstIndex = (page - 1) * rows;
  const paged = useMemo(
    () => sorted.slice(firstIndex, firstIndex + rows),
    [sorted, firstIndex, rows]
  );

  const goTo = (p: number) => {
    const next = Math.min(Math.max(1, p), totalPages);
    if (next !== page) setPage(next);
  };

  /* ---------------------------------- UI ----------------------------------- */
  return (
    <div className="min-h-screen">
      <Toast ref={toast} />

      <div className="flex items-center justify-between mt-5 mb-5">
        <BreadCrumb
          model={[{ label: 'Accueil', url: '/' }, { label: 'Gestion des Commandes' }]}
          home={{ icon: 'pi pi-home', url: '/' }}
          className="bg-none"
        />
        <h2 className="text-2xl font-bold text-gray-700">Gestion des Commandes</h2>
      </div>

      <div className="bg-white p-4 rounded-lg shadow-md">
        {/* ---------- TABLE TAILWIND (style DataTable) ---------- */}
        <div className="overflow-x-auto rounded-lg border border-gray-200">
          <table className="min-w-[70rem] w-full text-sm">
            <thead>
              <tr className="bg-green-800 text-white">
                <th className="px-4 py-2 text-left">N°</th>

                <th
                  className="px-4 py-2 text-left cursor-pointer select-none"
                  onClick={() => toggleSort('numero')}
                >
                  Numéro <SortIcon order={sortBy === 'numero' ? order : null} />
                </th>

                <th
                  className="px-4 py-2 text-left cursor-pointer select-none"
                  onClick={() => toggleSort('region')}
                >
                  Région <SortIcon order={sortBy === 'region' ? order : null} />
                </th>

                <th
                  className="px-4 py-2 text-left cursor-pointer select-none"
                  onClick={() => toggleSort('pointVente')}
                >
                  Point de vente <SortIcon order={sortBy === 'pointVente' ? order : null} />
                </th>

                <th
                  className="px-4 py-2 text-left cursor-pointer select-none"
                  onClick={() => toggleSort('nb')}
                >
                  Nb produits <SortIcon order={sortBy === 'nb' ? order : null} />
                </th>

                <th
                  className="px-4 py-2 text-left cursor-pointer select-none"
                  onClick={() => toggleSort('statut')}
                >
                  Statut <SortIcon order={sortBy === 'statut' ? order : null} />
                </th>

                <th
                  className="px-4 py-2 text-left cursor-pointer select-none"
                  onClick={() => toggleSort('montant')}
                >
                  Montant <SortIcon order={sortBy === 'montant' ? order : null} />
                </th>

                <th
                  className="px-4 py-2 text-left cursor-pointer select-none"
                  onClick={() => toggleSort('createdAt')}
                >
                  Créée le <SortIcon order={sortBy === 'createdAt' ? order : null} />
                </th>

                <th className="px-4 py-2 text-left">Actions</th>
              </tr>
            </thead>

            <tbody>
              {loading && commandes.length === 0 ? (
                <tr>
                  <td className="px-4 py-6 text-center text-gray-500" colSpan={9}>
                    Chargement...
                  </td>
                </tr>
              ) : paged.length === 0 ? (
                <tr>
                  <td className="px-4 py-6 text-center text-gray-500" colSpan={9}>
                    Aucune commande trouvée.
                  </td>
                </tr>
              ) : (
                paged.map((row, idx) => {
                  const idxGlobal = firstIndex + idx + 1;
                  const regionNom = (row?.region as any)?.nom ?? '-';
                  const pvNom = (row?.pointVente as any)?.nom ?? '-';
                  const nbProduits = asArray<CommandeProduit>(row?.produits).length;
                  const montant = formatCDF((row as any)?.montant);
                  const created = row?.createdAt
                    ? format(new Date(row.createdAt), 'dd/MM/yyyy HH:mm', { locale: fr })
                    : '-';
                  const s = row?.statut ?? '-';
                  const clsStatut =
                    s === 'livrée'
                      ? 'bg-green-600'
                      : s === 'annulée'
                        ? 'bg-red-500'
                        : 'bg-amber-500';

                  return (
                    <tr
                      key={row?._id ?? idx}
                      className={(idx % 2 === 0 ? 'bg-gray-100' : 'bg-green-50') + ' text-gray-900'}
                    >
                      <td className="px-4 py-2">{idxGlobal}</td>
                      <td className="px-4 py-2">{row?.numero ?? '-'}</td>
                      <td className="px-4 py-2">{regionNom}</td>
                      <td className="px-4 py-2">{pvNom}</td>
                      <td className="px-4 py-2">{nbProduits}</td>
                      <td className="px-4 py-2">
                        <span className={`px-2 py-1 rounded text-white text-xs ${clsStatut}`}>
                          {s}
                        </span>
                      </td>
                      <td className="px-4 py-2">{montant}</td>
                      <td className="px-4 py-2">{created}</td>
                      <td className="px-4 py-2">
                        <Button
                          icon="pi pi-bars"
                          className="w-8 h-8 flex items-center justify-center p-1 rounded text-white !bg-green-700"
                          onClick={(e) => showMenu(e, row?._id ?? '')}
                          disabled={!isNonEmptyString(row?._id)}
                          aria-haspopup
                        />
                        <Menu
                          popup
                          model={[
                            {
                              label: 'Voir produits',
                              icon: 'pi pi-eye',
                              command: () => handleOpenModal(row),
                            },
                          ]}
                          ref={(el) => setMenuRef(row?._id ?? '', el)}
                        />
                      </td>
                    </tr>
                  );
                })
              )}
            </tbody>
          </table>
        </div>

        {/* -------- PAGINATION -------- */}
        <div className="flex items-center justify-between mt-3">
          <div className="text-sm text-gray-700">
            Page <span className="font-semibold">{page}</span> / {totalPages} —{' '}
            <span className="font-semibold">{total}</span> éléments
          </div>

          <div className="flex items-center gap-2">
            <label className="text-sm text-gray-700 mr-2">Lignes:</label>
            <select
              className="border rounded px-2 py-1 text-sm"
              value={rows}
              onChange={(e) => {
                const n = Number(e.target.value);
                setRows(n);
                // ajuste la page si besoin
                const newTotalPages = Math.max(1, Math.ceil(total / n));
                setPage((p) => Math.min(p, newTotalPages));
              }}
            >
              {[10, 20, 30, 50, 100].map((n) => (
                <option key={n} value={n}>
                  {n}
                </option>
              ))}
            </select>

            <button
              className="px-2 py-1 rounded bg-gray-200 text-gray-800 disabled:opacity-50"
              onClick={() => goTo(1)}
              disabled={page <= 1}
            >
              «
            </button>
            <button
              className="px-2 py-1 rounded bg-gray-200 text-gray-800 disabled:opacity-50"
              onClick={() => goTo(page - 1)}
              disabled={page <= 1}
            >
              ‹
            </button>
            <button
              className="px-2 py-1 rounded bg-gray-200 text-gray-800 disabled:opacity-50"
              onClick={() => goTo(page + 1)}
              disabled={page >= totalPages}
            >
              ›
            </button>
            <button
              className="px-2 py-1 rounded bg-gray-200 text-gray-800 disabled:opacity-50"
              onClick={() => goTo(totalPages)}
              disabled={page >= totalPages}
            >
              »
            </button>
          </div>
        </div>
      </div>

      {/* MODAL (petit tableau => PrimeReact OK) */}
      <Dialog
        header="Détails de la commande"
        visible={visible}
        onHide={() => setVisible(false)}
        style={{ width: '95vw', maxWidth: 880 }}
        modal
      >
        <div className="overflow-x-auto rounded-lg border border-gray-200">
          <table className="min-w-[40rem] w-full text-sm">
            <thead>
              <tr className="bg-green-800 text-white">
                <th className="px-4 py-2 text-left">#</th>
                <th className="px-4 py-2 text-left">Produit</th>
                <th className="px-4 py-2 text-left">Quantité</th>
                <th className="px-4 py-2 text-left">Livré</th>
              </tr>
            </thead>
            <tbody>
              {asArray<CommandeProduitWithTempChecked>(produitsLivrables).map((row, i) => (
                <tr
                  key={(row as any)?._id ?? i}
                  className={
                    (row?.statut === 'livré'
                      ? 'bg-green-50'
                      : i % 2 === 0
                        ? 'bg-gray-100'
                        : 'bg-white') + ' text-gray-900'
                  }
                >
                  <td className="px-4 py-2">{i + 1}</td>
                  <td className="px-4 py-2">{row?.produit?.nom ?? '-'}</td>
                  <td className="px-4 py-2">{safeNumber(row?.quantite).toString()}</td>
                  <td className="px-4 py-2">
                    <Checkbox
                      checked={!!row?._tempChecked}
                      disabled={row?.statut === 'livré'}
                      onChange={(e) => handleCheck(!!e.checked, i)}
                    />
                  </td>
                </tr>
              ))}
              {produitsLivrables.length === 0 && (
                <tr>
                  <td className="px-4 py-6 text-center text-gray-500" colSpan={4}>
                    Aucun produit.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        <div className="flex justify-end mt-4 gap-2">
          <Button
            label="Fermer"
            icon="pi pi-times"
            className="p-button-text"
            onClick={() => setVisible(false)}
          />
          <Button
            label="Effectuer la livraison"
            icon="pi pi-check"
            onClick={effectuerLivraison}
            loading={saving}
            disabled={saving}
            className="p-button-success"
          />
        </div>
      </Dialog>
    </div>
  );
};

export default Page;
